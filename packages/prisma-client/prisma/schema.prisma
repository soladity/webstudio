// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "clientExtensions", "jsonProtocol"]
  // see commands.ts
  // <output-placeholder-for-migrations>
  output          = "../src/__generated__"
  // </output-placeholder-for-migrations>
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Team {
  id    String @id @default(uuid())
  users User[]
}

enum Location {
  FS
  REMOTE
}

enum UploadStatus {
  UPLOADING
  UPLOADED
}

model File {
  name              String       @id
  format            String
  size              Int
  description       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  meta              String       @default("{}")
  status            UploadStatus @default(UPLOADING)
  isDeleted         Boolean      @default(false)
  uploaderProject   Project?     @relation(fields: [uploaderProjectId], references: [id])
  uploaderProjectId String?
  assets            Asset[]
}

model Asset {
  id        String   @default(uuid()) // not unique!
  projectId String
  file      File     @relation(fields: [name], references: [name])
  name      String
  location  Location

  // @todo remove these fields from schema and db after release
  format      String
  size        Int
  description String?
  createdAt   DateTime     @default(now())
  meta        String       @default("{}")
  status      UploadStatus @default(UPLOADED)

  @@id([id, projectId])
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  provider  String?
  image     String?
  username  String?
  createdAt DateTime  @default(now())
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
  projects  Project[]
}

model Project {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  title         String
  domain        String          @unique
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  build         Build[]
  isDeleted     Boolean         @default(false)
  files         File[]
  ProjectDomain ProjectDomain[]

  @@unique([id, isDeleted])
  @@unique([domain, isDeleted])
}

model Build {
  id        String   @default(uuid())
  createdAt DateTime @default(now())
  pages     String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  isDev  Boolean // exctly one is true per project
  isProd Boolean // at most one is true per project (none if not published)

  breakpoints           String @default("[]")
  styles                String @default("[]")
  styleSources          String @default("[]")
  styleSourceSelections String @default("[]")
  props                 String @default("[]")
  instances             String @default("[]")

  @@id([id, projectId])
}

enum AuthorizationRelation {
  viewers
  editors
  builders
}

model AuthorizationToken {
  token     String                @default(uuid())
  // No relation to Project, as the Authorization system is not tied to a project
  projectId String
  name      String                @default("")
  relation  AuthorizationRelation @default(viewers)
  createdAt DateTime              @default(now())

  @@id([token, projectId])
}

enum DomainStatus {
  INITIALIZING
  ACTIVE
  ERROR
  PENDING
}

// Domains  + last known status and last known txtRecord
// In the future we can update this table using queue, n8n or temporal workflows.
// As of now updates are done during UI interactions
model Domain {
  id                String              @id @default(uuid())
  domain            String              @unique
  createdAt         DateTime            @default(now())
  ProjectDomain     ProjectDomain[]
  // Last known txtRecord of the domain (to check domain ownership)
  txtRecord         String?
  // create, init, pending, active, error
  status            DomainStatus        @default(INITIALIZING)
  // In case of status="error", this will contain the error message
  error             String?
  projectWithDomain ProjectWithDomain[]
}

model ProjectDomain {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id])
  createdAt DateTime @default(now())
  // Generated txt record to check domain ownership
  txtRecord String   @unique @default(uuid())

  // CNAME record to point to the domain
  cname String

  @@id([projectId, domainId])
  @@index([domainId])
}

view ProjectWithDomain {
  projectId String
  domainId  String
  domain    Domain @relation(fields: [domainId], references: [id])
  txtRecord String

  createdAt DateTime

  // CNAME record to point to the domain
  cname String

  verified Boolean
  // To count statistics per user
  userId   String?

  @@id([projectId, domainId])
}

// Dashboard
view DashboardProject {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String
  domain      String
  userId      String?
  isDeleted   Boolean  @default(false)
  isPublished Boolean
}
